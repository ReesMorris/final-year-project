using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*
    This script handles the particle systems generated by Alucard's Q effect
*/
/// <summary>
/// This script handles the particle systems generated by Alucard's Q effect.
/// </summary>
public class AlucardQ_Effect : MonoBehaviour {

    // Private variables
    PhotonView photonView;

    /// <summary>
    /// Initialises the particle system on the network and deals damage.
    /// </summary>
    /// <param name="radius">The radius of the attack circle</param>
    /// <param name="damage">The damage dealt by the ability</param>
    /// <param name="attackerId">The ID of the player performing the ability</param>
    public void Init(float radius, float damage, int attackerId) {
        photonView = GetComponent<PhotonView>();
        photonView.RPC("InitRPC", PhotonTargets.AllBuffered, radius, damage, attackerId);
    }

    // Initialise the effect on the network
    [PunRPC]
    void InitRPC(float radius, float damage, int attackerId) {
        PhotonPlayer attacker = PhotonView.Find(attackerId).owner;

        // Set the size and position of the effect
        radius /= 2f;
        transform.position += Vector3.up * 0.3f;
        Transform[] allChildren = GetComponentsInChildren<Transform>();
        foreach (Transform child in allChildren) {
            child.localScale = new Vector3(radius, 1, radius);
        }

        // Damage any enemy minions/players in range
        if(PhotonNetwork.isMasterClient) {
            Collider[] hitColliders = Physics.OverlapSphere(transform.position, radius * 2f);
            for (int i = 0; i < hitColliders.Length; i++) {
                Entity entity = hitColliders[i].GetComponent<Entity>();
                if (entity != null) {
                    PhotonView targetView = entity.GetComponent<PhotonView>();
                    PhotonPlayer target = targetView.owner;
                    if (entity.team != attacker.GetTeam()) {
                        if (entity.GetComponent<PlayerChampion>() != null)
                            targetView.RPC("Damage", PhotonTargets.AllBuffered, damage, attackerId);
                        else if (entity.GetComponent<Minion>() != null)
                            targetView.RPC("EntityDamage", PhotonTargets.AllBuffered, damage, attackerId);
                    }
                }
            }
            StartCoroutine("Delete");
        }
    }

    // Destroy the particle effects after time
    IEnumerator Delete() {
        yield return new WaitForSeconds(1.5f);
        PhotonNetwork.Destroy(gameObject);
    }
}
